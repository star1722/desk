#include<iostream>
#include<queue>
using namespace std;

class Node {
public:
    int data;
    Node *left, *right;
    
    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

class BinaryTree {
public:
    Node* insert(Node* root, int data) {
        if (root == nullptr)
            return new Node(data);
        
        queue<Node*> q;
        q.push(root);
        
        while (!q.empty()) {
            Node* temp = q.front();
            q.pop();
            
            if (temp->left == nullptr) {
                temp->left = new Node(data);
                return root;
            }
            else {
                q.push(temp->left);
            }
            
            if (temp->right == nullptr) {
                temp->right = new Node(data);
                return root;
            }
            else {
                q.push(temp->right);
            }
        }
        return root;
    }
    
    void bfs(Node* root) {
        if (root == nullptr) return;
        
        queue<Node*> q;
        q.push(root);
        
        while (!q.empty()) {
            int levelSize = q.size();
            for (int i = 0; i < levelSize; i++) {
                Node* currNode = q.front();
                q.pop();
                cout << currNode->data << "\t";
                if (currNode->left) q.push(currNode->left);
                if (currNode->right) q.push(currNode->right);
            }
            cout << endl;
        }
    }
};

int main() {
    BinaryTree tree;
    Node* root = nullptr;
    char ans;
    do {
        int data;
        cout << "\nEnter data: ";
        cin >> data;
        root = tree.insert(root, data);
        cout << "Do you want to insert one more node? (y/n): ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');

    cout << "\nBreadth-First Traversal: \n";
    tree.bfs(root);
    
    return 0;
}
